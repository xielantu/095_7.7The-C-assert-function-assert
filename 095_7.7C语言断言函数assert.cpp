// 095_7.7C语言断言函数assert.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
//

#include <stdio.h>
#include <string.h>
#include <assert.h>

//在运行时，如果断言表达式为假（即条件不满足），则断言失败，程序会终止，并输出错误信息。
//下面是断言的意义和使用的一些情况：
//
//帮助调试：断言可用于在程序开发和调试阶段发现问题。通过在关键位置插入断言，可以验证程序中的假设和约定是否正确。如果断言失败，那么说明程序存在潜在问题，帮助开发者迅速定位和修复错误。
//
//捕捉逻辑错误：断言可以检查代码中的逻辑错误。通过在关键点检查预期条件，可以捕获到程序在执行中出现的意外情况，例如数组下标越界、指针为空等，从而帮助防止潜在的崩溃或未定义的行为。
//
//说明假设条件：代码通常基于一些特定的假设条件来进行设计。断言可以将这些假设条件表达出来，并在运行时进行验证。如果假设条件不满足，断言将失败并指示出程序设计的问题。
//
//需要注意的是，断言是开发期间的调试工具，通常在软件发布之前应该将其禁用或移除。在发布版本中，断言可能会带来性能损失，并且不应该影响正常的用户体验。通常通过定义 NDEBUG 宏来禁用断言，可以在编译时使用 - DNDEBUG 选项来禁用所有断言。
//
//总结起来，断言是一种用于检查程序中的条件是否满足的工具，可以帮助调试和捕捉逻辑错误。它在开发和调试阶段使用，对于确保软件的稳定性和正确性非常有帮助



char* myStrcpy(char* des, char* src)
{
	/*if (des == NULL || src == NULL)	return NULL;*/
	assert(des != NULL && src != NULL);//断言//在运行时，如果断言表达式为假（即条件不满足），则断言失败，程序会终止，并输出错误信息。
	//des和src都不为空，才是真，程序才能继续跑下去，否则程序终止，并输出错误信息
	char* bak = des;
	while (*src != '\0')
	{
		*des = *src;
		des++;
		src++;
	}
	*des = '\0';
	return bak;
}

int main()
{
	char str[128] = { '\0' };
	char a = 'm';
	char b;
	if ((b = a) == 'm')	printf("ok\n");

	char* p = (char*)"chenlichen handsome";
	myStrcpy(str, p);
	puts(str);

	return 0;
}